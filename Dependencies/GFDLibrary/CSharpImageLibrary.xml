<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharpImageLibrary</name>
    </assembly>
    <members>
        <member name="T:CSharpImageLibrary.DDS.BC7">
            <summary>
            Adapted almost wholesale from DirectXTex from Microsoft. https://github.com/Microsoft/DirectXTex
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.DDS.DDSGeneral">
            <summary>
            Provides general functions specific to DDS format
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.DDS.DDSGeneral.DXT1AlphaThreshold">
            <summary>
            Value at which alpha is included in DXT1 conversions. i.e. pixels lower than this threshold are made 100% transparent, and pixels higher are made 100% opaque.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDSGeneral.CheckSize_DXT(System.Int32,System.Int32)">
            <summary>
            Determines whether an image size is suitable for DXT compression.
            </summary>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
            <returns>True if size is suitable for DXT compression.</returns>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDSGeneral.BuildMipMaps(System.Collections.Generic.List{CSharpImageLibrary.MipMap})">
            <summary>
            Ensures all Mipmaps are generated in MipMaps.
            </summary>
            <param name="MipMaps">MipMaps to check.</param>
            <returns>Number of mipmaps present in MipMaps.</returns>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDSGeneral.EstimateNumMipMaps(System.Int32,System.Int32)">
            <summary>
            Estimates number of MipMaps for a given width and height EXCLUDING the top one.
            i.e. If output is 10, there are 11 mipmaps total.
            </summary>
            <param name="Width">Image Width.</param>
            <param name="Height">Image Height.</param>
            <returns>Number of mipmaps expected for image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDSGeneral.EnsureMipInImage(System.Int64,System.Int32,System.Int32,System.Int32,CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails,System.Int32@)">
            <summary>
            Checks image file size to ensure requested mipmap is present in image.
            Header mip count can be incorrect or missing. Use this method to validate the mip you're after.
            </summary>
            <param name="streamLength">Image file stream length.</param>
            <param name="mainWidth">Width of image.</param>
            <param name="mainHeight">Height of image.</param>
            <param name="desiredMipDimension">Max dimension of desired mip.</param>
            <param name="destFormatDetails">Destination format details.</param>
            <param name="mipOffset">Offset of desired mipmap in image.</param>
            <returns>True if mip in image.</returns>
        </member>
        <member name="T:CSharpImageLibrary.DDS.DDS_BlockHelpers.RGBColour">
            <summary>
            This region contains stuff adpated/taken from the DirectXTex project: https://github.com/Microsoft/DirectXTex
            Things needed to be in the range 0-1 instead of 0-255, hence new struct etc
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDS_BlockHelpers.DoColourFixErrorCorrection(CSharpImageLibrary.DDS.DDS_BlockHelpers.RGBColour[],CSharpImageLibrary.DDS.DDS_BlockHelpers.RGBColour[])">
            <summary>
            Not exactly sure what this does or why.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDS_BlockHelpers.UnpackDXTColour(System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a packed DXT colour into RGB
            </summary>
            <param name="colour">Colour to convert to RGB</param>
            <param name="destination">Decompressed array.</param>
            <param name="position">Position in destination to write RGB at.</param>
            <param name="isPremultiplied">True = RGB interpreted as being premultiplied with A channel.</param>
            <returns>RGB bytes</returns>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDS_BlockHelpers.ReadDXTColour(System.Int32,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Reads a packed DXT colour into RGB
            </summary>
            <param name="colour">Colour to convert to RGB</param>
            <param name="blue">Blue value of colour.</param>
            <param name="red">Red value of colour.</param>
            <param name="green">Green value of colour.</param>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDS_BlockHelpers.BuildDXTColour(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a packed DXT colour from RGB.
            </summary>
            <param name="r">Red byte.</param>
            <param name="g">Green byte.</param>
            <param name="b">Blue byte.</param>
            <returns>DXT Colour</returns>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDS_BlockHelpers.Build8BitPalette(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Builds palette for 8 bit channel.
            </summary>
            <param name="min">First main colour (often actually minimum)</param>
            <param name="max">Second main colour (often actually maximum)</param>
            <param name="isSigned">true = sets signed alpha range (-254 -- 255), false = 0 -- 255</param>
            <returns>8 byte colour palette.</returns>
        </member>
        <member name="M:CSharpImageLibrary.DDS.DDS_BlockHelpers.BuildRGBPalette(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Builds an RGB palette from the min and max colours of a texel.
            </summary>
            <param name="Colour0">First colour, usually the min.</param>
            <param name="Colour1">Second colour, usually the max.</param>
            <param name="isDXT1">True = for DXT1 texels. Changes how the internals are calculated.</param>
            <returns>Texel palette.</returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.AbstractHeader">
            <summary>
            Base header class for image headers.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.AbstractHeader.Format">
            <summary>
            Format of image as seen by header.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.AbstractHeader.Width">
            <summary>
            Width of image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.AbstractHeader.Height">
            <summary>
            Height of image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.AbstractHeader.Load(System.IO.Stream)">
            <summary>
            Loads header from stream.
            </summary>
            <param name="stream">Stream to load header from.</param>
            <returns>Length of header.</returns>
        </member>
        <member name="M:CSharpImageLibrary.Headers.AbstractHeader.ToString">
            <summary>
            Provides string representation of header.
            </summary>
            <returns>String of header properties.</returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.BMP_Header">
            <summary>
            Provides information given by BMP headers.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader">
            <summary>
            File header for BMP file.
            Contains general file information such as size and data offset.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader.HeaderSize">
            <summary>
            Size of File header.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader.FileSize">
            <summary>
            Size of entire BMP file incl headers.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader.Reserved1">
            <summary>
            Reserved for something.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader.Reserved2">
            <summary>
            Reserved for something 2.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader.DataOffset">
            <summary>
            Offset in file of pixel data block.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader.#ctor(System.Byte[])">
            <summary>
            Read File header from BMP header.
            </summary>
            <param name="headerBlock">Header block containing BMP File Header.</param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.BMP_Header.BMPFileHeader.ToString">
            <summary>
            Show string representation of header.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader">
            <summary>
            Detailed image header.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.HeaderSize">
            <summary>
            Size of DIB header.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.Width">
            <summary>
            Width of image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.Height">
            <summary>
            Height of image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.ColourPlanes">
            <summary>
            Colour panes. Dunno what this is.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.BPP">
            <summary>
            Bits per pixel.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.CompressionMethod">
            <summary>
            Method of compression.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.RawImageSize">
            <summary>
            Size of data block.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.HorizontalResolution">
            <summary>
            Horizontal resolution. Probably 96 pixels per inch. Filthy Imperial measurements.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.VerticalResolution">
            <summary>
            Vertical resolution. Probably 96 pixels per inch. Filthy Imperial measurements.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.NumColoursInPalette">
            <summary>
            Number of colours in indexed palette.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.NumImportantColours">
            <summary>
            Number of important colours in palette.
            Usually ignored cos why put them in there then...
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.BMP_Header.BMPDIBHeader.#ctor(System.Byte[])">
            <summary>
            Reads the detailed DIB header from a full file-DIB header block.
            </summary>
            <param name="headerBlock"></param>
        </member>
        <member name="F:CSharpImageLibrary.Headers.BMP_Header.Identifier">
            <summary>
            Characters beginning the file marking it as a BMP image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.BMP_Header.FileHeader">
            <summary>
            General File size information.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.BMP_Header.DIBHeader">
            <summary>
            Detailed image information.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.BMP_Header.#ctor(System.IO.Stream)">
            <summary>
            Reads header from BMP image.
            </summary>
            <param name="stream">Fully formatted BMP image.</param>
        </member>
        <member name="P:CSharpImageLibrary.Headers.BMP_Header.Format">
            <summary>
            Image Format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.BMP_Header.Load(System.IO.Stream)">
            <summary>
            Loads BMP header from stream.
            </summary>
            <param name="stream">Fully formatted BMP image.</param>
            <returns>Length of header.</returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header">
            <summary>
            Contains header information about a DDS File.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.Identifier">
            <summary>
            Characters beginning a file that indicate file is a DDS image.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT">
            <summary>
            Contains information about DDS Pixel Format.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwSize">
            <summary>
            Sub-header Size in bytes.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwFlags">
            <summary>
            Option flags.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwFourCC">
            <summary>
            FourCC of DDS, i.e. DXT1, etc
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwRGBBitCount">
            <summary>
            RGB Channel width.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwRBitMask">
            <summary>
            Red bit mask. i.e. pixel is FF12AA22, so mask might be FF000000 and we get pure red.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwGBitMask">
            <summary>
            Green bit mask. i.e. pixel is FF12AA22, so mask might be 00FF0000 and we get 00120000.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwBBitMask">
            <summary>
            Blue bit mask. i.e. pixel is FF12AA22, so mask might be 0000FF00 and we get 0000AA00.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.dwABitMask">
            <summary>
            Alpha bit mask. i.e. pixel is FF12AA22, so mask might be 000000FF and we get 00000022.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.#ctor(System.Byte[])">
            <summary>
            Fill PixelFormat from full DDS header
            </summary>
            <param name="temp">Full DDS header block.</param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.#ctor(CSharpImageLibrary.ImageEngineFormat)">
            <summary>
            Build PixelFormat sub-header for a specified surface format.
            </summary>
            <param name="surfaceFormat">Format to base PixelHeader on.</param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT.ToString">
            <summary>
            String representation of DDS pixel format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.FourCC">
            <summary>
            Old method of identifying Compressed textures.
            DX10 indicates new texture, the DX10 Additional header will contain the true format. See <see cref="T:CSharpImageLibrary.Headers.DDS_Header.DXGI_FORMAT"/>.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.Unknown">
            <summary>
            Used when FourCC is unknown.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.DXT1">
            <summary>
            (BC1) Block Compressed Texture. Compresses 4x4 texels.
            Used for Simple Non Alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.DXT2">
            <summary>
            (BC2) Block Compressed Texture. Compresses 4x4 texels.
            Used for Sharp Alpha. Premultiplied alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.DXT3">
            <summary>
            (BC2) Block Compressed Texture. Compresses 4x4 texels.
            Used for Sharp Alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.DXT4">
            <summary>
            (BC3) Block Compressed Texture. Compresses 4x4 texels.
            Used for Gradient Alpha. Premultiplied alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.DXT5">
            <summary>
            (BC3) Block Compressed Texture. Compresses 4x4 texels.
            Used for Gradient Alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.DX10">
            <summary>
            Fancy new DirectX 10+ format indicator. DX10 Header will contain true format.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.ATI1">
            <summary>
            (BC4) Block Compressed Texture. Compresses 4x4 texels.
            Used for Normal (bump) Maps. 8 bit single channel with alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.FourCC.ATI2N_3Dc">
            <summary>
            (BC5) Block Compressed Texture. Compresses 4x4 texels.
            Used for Normal (bump) Maps. Pair of 8 bit channels.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags">
            <summary>
            Option flags. Indicate certain properties of DDS, such as mipmapping and dimensions.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_CAPS">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_HEIGHT">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_WIDTH">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_PITCH">
            <summary>
            Required when Pitch is specified for uncompressed textures.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_PIXELFORMAT">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_MIPMAPCOUNT">
            <summary>
            Required if texture contains mipmaps.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_LINEARSIZE">
            <summary>
            Required when pitch/linear size is specified for compressed textures.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwFlags.DDSD_DEPTH">
            <summary>
            Required for Depth/Volume textures.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.DDSdwCaps">
            <summary>
            More option flags, but mostly irrelevant.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwCaps.DDSCAPS_COMPLEX">
            <summary>
            Must be specified on image that has more than one surface. (mipmap, cube, volume)
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwCaps.DDSCAPS_MIPMAP">
            <summary>
            Should be set for mipmapped image
            </summary> 
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDSdwCaps.DDSCAPS_TEXTURE">
            <summary>
            Required.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags">
            <summary>
            Denotes PixelFormat flags. Settings that indicate how pixels are shown.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags.DDPF_ALPHAPIXELS">
            <summary>
            Texture contains alpha. i.e. dwRGBAlphaBitmapMask contains valid data.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags.DDPF_ALPHA">
            <summary>
            Used in some older files for alpha channel only uncompressed data. i.e. dwRGBBitCount contains alpha channel bitcount, dwABitMask contains valid data.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags.DDPF_FOURCC">
            <summary>
            Contains compressed RGB. dwFourCC has a value
            </summary>       
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags.DDPF_RGB">
            <summary>
            Contains uncompressed RGB. dwRGBBitCount and RGB bitmasks have a value
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags.DDPF_YUV">
            <summary>
            Used in some old files for YUV uncompressed data. i.e. dwRGBBitCount contains YUV bitcount, dwRBitMask contains Y mask, dwGBitMask contains U mask, dwBBitMask contains V mask.
            YUV is a weird colourspace. Y = intensity, UV = colour. Y = 0-1 (0-255), U,V = -0.5-0.5 (-128-127) or 0-255.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags.DDPF_LUMINANCE">
            <summary>
            Old flag for single channel colour uncompressed. dwRGBBitCount contains luminescence channel bit count, dwRBitMask contains channel mask. Can combine with DDPF_ALPHAPIXELS for 2 channel DDS file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_PFdwFlags.DDPF_SIGNED">
            <summary>
            Undocumented flag that seems to indicate that format is signed. EDIT Seems to be a nVidia thing as specified in the NVTT solution: https://github.com/castano/nvidia-texture-tools
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional">
            <summary>
            Additional header used by DXGI/DX10 DDS'.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional.dxgiFormat">
            <summary>
            Surface format.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional.resourceDimension">
            <summary>
            Dimension of texture (1D, 2D, 3D)
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional.miscFlag">
            <summary>
            Identifies less common options. e.g. 0x4 = DDS_RESOURCE_MISC_TEXTURECUBE
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional.arraySize">
            <summary>
            Number of elements in array.
            For 2D textures that are cube maps, it's the number of cubes. Can also be random images made with texassemble.exe.
            For 3D textures, must be 1.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional.miscFlags2">
            <summary>
            Alpha flags.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional.#ctor(System.Byte[],System.Int32)">
            <summary>
            Read DX10-DXGI header from full DDS header block.
            </summary>
            <param name="fullHeaderBlock">Entire DDS header block.</param>
            <param name="offset">Offset at which this header starts in full block.</param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.DDS_DXGI_DX10_Additional.ToString">
            <summary>
            Shows string description of additional DX10 header.
            </summary>
            <returns>String header.</returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.DXGI_MiscFlags">
            <summary>
            Option flags to indicate alpha mode.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DXGI_MiscFlags.DDS_ALPHA_MODE_UNKNOWN">
            <summary>
            Alpha content unknown. Default for legacy files, assumed to be "Straight".
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DXGI_MiscFlags.DDS_ALPHA_MODE_STRAIGHT">
            <summary>
            Any alpha is "straight". Standard. i.e. RGBA all separate channels. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DXGI_MiscFlags.DDS_ALPHA_MODE_PREMULTIPLIED">
            <summary>
            Any alpha channels are premultiplied i.e. RGB (without A) with premultiplied alpha has values that include alpha by way of multiplying the original RGB with the A.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DXGI_MiscFlags.DDS_ALPHA_MODE_OPAQUE">
            <summary>
            Alpha is fully opaque.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.DXGI_MiscFlags.DDS_ALPHA_MODE_CUSTOM">
            <summary>
            Alpha channel isn't for transparency.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.D3D10_RESOURCE_DIMENSION">
            <summary>
            Indicates type of DXGI/DX10 texture.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE1D">
            <summary>
            1D Texture specified by dwWidth of DDS_Header = size of texture. Typically, dwHeight = 1 and DDSD_HEIGHT flag is also set in dwFlags.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE2D">
            <summary>
            2D Texture specified by dwWidth and dwHeight of DDS_Header. Can be cube map if miscFlag and arraySize members are set.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D">
            <summary>
            3D Texture specified by dwWidth, dwHeight, and dwDepth. Must have DDSD_DEPTH Flag set in dwFlags.
            </summary> 
        </member>
        <member name="T:CSharpImageLibrary.Headers.DDS_Header.DXGI_FORMAT">
            <summary>
            DXGI/DX10 formats.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.BC7DecodeMode.Mode_0">
            <summary>
            RGB only. 3 subsets per block. RGBP 4.4.4.1 endpoints with a unique P-bit per endpoint. 
            3 bit indicies.
            16 bit partitions.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.BC7DecodeMode.Mode_1">
            <summary>
            
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.dwSize">
            <summary>
            Size of header in bytes. Must be 124.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.dwFlags">
            <summary>
            Option flags.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.dwPitchOrLinearSize">
            <summary>
            Pitch or linear size. I think this is stride in Windows lingo?
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.dwDepth">
            <summary>
            Image depth. Usually not used.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.dwMipMapCount">
            <summary>
            Number of mipmaps.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.dwReserved1">
            <summary>
            Not used, as per Windows DDS spec.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.ddspf">
            <summary>
            Pixel format of DDS.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.dwCaps">
            <summary>
            More option flags.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.dwCaps2">
            <summary>
            Don't think it's used.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.dwCaps3">
            <summary>
            Don't think it's used.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.dwCaps4">
            <summary>
            Don't think it's used.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.DDS_Header.dwReserved2">
            <summary>
            Not used as per Windows DDS spec.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.DX10_DXGI_AdditionalHeader">
            <summary>
            Additional header for newer DX10 images.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.DDS_Header.Format">
            <summary>
            Surface format of DDS.
            e.g. DXT1, V8U8, etc
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.Load(System.IO.Stream)">
            <summary>
            Reads DDS header from stream.
            </summary>
            <param name="stream">Fully formatted DDS image.</param>
            <returns>Header length.</returns>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.#ctor(System.IO.Stream)">
            <summary>
            Read Header from DDS Image.
            </summary>
            <param name="stream">Fully formatted DDS image.</param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.#ctor(System.Int32,System.Int32,System.Int32,CSharpImageLibrary.ImageEngineFormat,CSharpImageLibrary.Headers.DDS_Header.DXGI_FORMAT)">
            <summary>
            Creates a DDS header from a set of information.
            </summary>
            <param name="Mips">Number of mipmaps.</param>
            <param name="Height">Height of top mipmap.</param>
            <param name="Width">Width of top mipmap.</param>
            <param name="surfaceformat">Format header represents.</param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.ParseFourCC(CSharpImageLibrary.Headers.DDS_Header.FourCC,CSharpImageLibrary.Headers.DDS_Header.DXGI_FORMAT)">
            <summary>
            Determines friendly format from FourCC, with additional DXGI/DX10 format.
            </summary>
            <param name="fourCC">FourCC of DDS (DXT1-5)</param>
            <param name="additionalDX10"></param>
            <returns>Friendly format.</returns>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.DetermineDDSSurfaceFormat(CSharpImageLibrary.Headers.DDS_Header.DDS_PIXELFORMAT)">
            <summary>
            Determines DDS Surface Format given the header.
            </summary>
            <param name="ddspf">DDS PixelFormat structure.</param>
            <returns>Friendly format.</returns>
        </member>
        <member name="M:CSharpImageLibrary.Headers.DDS_Header.WriteToArray(System.Byte[],System.Int32)">
            <summary>
            Writes header to destination array starting at index.
            </summary>
            <param name="destination">Array to write header to.</param>
            <param name="index">Index in destination to start writing at.</param>
        </member>
        <member name="T:CSharpImageLibrary.Headers.GIF_Header">
            <summary>
            Provides information given by GIF file header.
            Mostly from http://giflib.sourceforge.net/whatsinagif/bits_and_bytes.html
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.GIF_Header.Identifier">
            <summary>
            Characters beginning the file marking it as a GIF image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.Version">
            <summary>
            Version of bitmap spec. Not really used.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.CanvasHeight">
            <summary>
            Usually ignored. Original use was for mozaic.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.CanvasWidth">
            <summary>
            Usually ignored. Original use was for mozaic.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.HasGlobalColourTable">
            <summary>
            If true, global colour table present.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.ColourResolution_BPP">
            <summary>
            Bits per pixel in global colour table.
            Only valid when Global Colour Table is present.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.ColourSortFlag">
            <summary>
            Indicates whether Global Colour Table is sorted in order of decreasing importance.
            Not used, and only valid when Global Colour Table is present.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.GlobalColourTableSize">
            <summary>
            Size of Global Colour Table in bytes.
            Potentially not filled.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.BackgroundColourIndex">
            <summary>
            Determines background colour of canvas.
            Not generally used since canvas not used.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.PixelAspectRatio">
            <summary>
            Not used by any modern viewers.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.GlobalColourTable">
            <summary>
            Represents colour table for image. Indexed colours.
            Not required to be present. Format = RGB, 0-255 each.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.DisposalMethod">
            <summary>
            Frame disposal method for animation.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.TransparentColourFlag">
            <summary>
            Indicates whether there is a transparent colour.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.AnimationDelayTime">
            <summary>
            Frame delay time. i.e. 'speed' of animation.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.TransparentColourIndex">
            <summary>
            Index in global colour table of transparent colour.
            Only valid if TransparentColourFlag is true.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.AnimationLoopCount">
            <summary>
            Number of times animation loops.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.UserInputFlag">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.ImageLeft">
            <summary>
            Offset from canvas left.
            Usually ignored.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.ImageTop">
            <summary>
            Offset from canvas top. 
            Usually ignored.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.HasLocalColourTables">
            <summary>
            Indicates whether image has a local colour table, overriding the global table (if exists)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.IsInterlaced">
            <summary>
            Indicates whether image is interlaced.
            Interlacing is showing every other line, then filling in the blanks later so user gets an idea what it looks like first.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.LocalSortFlag">
            <summary>
            Same as global sort. Indicates whether local table is ordered in descending order of importance.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.LocalColourTableSize">
            <summary>
            Size of local Colour Table in bytes.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.GIF_Header.Format">
            <summary>
            Image format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.GIF_Header.#ctor(System.IO.Stream)">
            <summary>
            Reads header from GIF image.
            </summary>
            <param name="stream">Fully formatted GIF image.</param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.GIF_Header.Load(System.IO.Stream)">
            <summary>
            Read header from stream.
            </summary>
            <param name="stream">Stream containing header.</param>
            <returns>Length of header.</returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.JPG_Header">
            <summary>
            Contains information about a JPG image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.JPG_Header.HeaderSize">
            No printable characters mark a jpg. See <see cref="M:CSharpImageLibrary.Headers.JPG_Header.CheckIdentifier(System.Byte[])"/>.
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.DataSectionLength">
            <summary>
            Length of data section (APP0/JFIF), includes thumbnail etc.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.Identifier">
            <summary>
            Identifier as a JPEG image. Should always be JFIF.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.Version">
            <summary>
            Version of JFIF file was created with.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.ResolutionUnits">
            <summary>
            Units of resolution. Dunno what means what though.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.HorizontalResolution">
            <summary>
            Horizontal resolution in unit specified by <see cref="P:CSharpImageLibrary.Headers.JPG_Header.ResolutionUnits"/>.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.VerticalResolution">
            <summary>
            Vertical resolution in unit specified by <see cref="P:CSharpImageLibrary.Headers.JPG_Header.ResolutionUnits"/>.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.XThumbnailPixelCount">
            <summary>
            Horizontal pixel count of Thumbnail stored in image.
            If no thumbnail, set to 0.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.YThumbnailPixelCount">
            <summary>
            Vertical pixel count of Thumbnail stored in image.
            If no thumbnail, set to 0.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.JPG_Header.Format">
            <summary>
            Image format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.JPG_Header.Load(System.IO.Stream)">
            <summary>
            Read header of JPG image.
            </summary>
            <param name="stream">Fully formatted JPG image.</param>
            <returns>Length of header.</returns>
        </member>
        <member name="M:CSharpImageLibrary.Headers.JPG_Header.#ctor(System.IO.Stream)">
            <summary>
            Loads a JPG header.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:CSharpImageLibrary.Headers.PNG_Header">
            <summary>
            Contains information about a PNG file header.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.PNG_Header.PNGChunk">
            <summary>
            Header Chunk containing specific PNG header information.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.PNG_Header.PNGChunk.Length">
            <summary>
            Length of chunk.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.PNG_Header.PNGChunk.ChunkType">
            <summary>
            Type of chunk.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.PNG_Header.PNGChunk.ChunkData">
            <summary>
            Data in chunk.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.PNG_Header.PNGChunk.CRC">
            <summary>
            Cyclic Redundancy Check of chunk to determine validity. 
            Doesn't include Length field.
            Always present regardless of chunk data presence.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.PNG_Header.PNGChunk.#ctor(System.Byte[],System.Int32)">
            <summary>
            Reads a PNG header chunk.
            </summary>
            <param name="headerBlock">Block of data containing headers.</param>
            <param name="offset">Offset in data to begin header.</param>
        </member>
        <member name="F:CSharpImageLibrary.Headers.PNG_Header.Identifier">
            <summary>
            Characters beginning the file marking it as a GIF image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.PNG_Header.BitDepth">
            <summary>
            Bit depth PER PALETTE INDEX, not per pixel. Valid values 1, 2, 4, 8, 16.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.PNG_Header.colourType">
            <summary>
            Type of colour mapping method used.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.PNG_Header.CompressionMethod">
            <summary>
            Compression Method. Currently must be 0 (deflate)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.PNG_Header.FilterMethod">
            <summary>
            Indicates preprocessing method performed before compression.
            Currently must be 0 (Adaptive filtering)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.PNG_Header.InterlaceMethod">
            <summary>
            Indicates interlacing method.
            0 = none, 1 = Adam7
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.PNG_Header.Format">
            <summary>
            Image format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.PNG_Header.Load(System.IO.Stream)">
            <summary>
            Loads PNG header from stream.
            </summary>
            <param name="stream">Fully formatted header stream. Position not relevant, but not reset.</param>
            <returns>Header length.</returns>
        </member>
        <member name="M:CSharpImageLibrary.Headers.PNG_Header.#ctor(System.IO.Stream)">
            <summary>
            Reads the header from a PNG image.
            </summary>
            <param name="stream">Fully formatted PNG image.</param>
        </member>
        <member name="T:CSharpImageLibrary.Headers.TGA_Header">
            <summary>
            Reads the header of a Targa (TGA) image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TGA_Header.header">
            <summary>
            Base TGA header.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TGA_Header.Format">
            <summary>
            Image format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.TGA_Header.#ctor(System.IO.Stream)">
            <summary>
            Reads a TGA header from stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.TGA_Header.Load(System.IO.Stream)">
            <summary>
            Reads the header of a TGA image.
            </summary>
            <param name="stream">Fully formatted TGA image.</param>
            <returns>Length of header.</returns>
        </member>
        <member name="T:CSharpImageLibrary.Headers.TIFF_Header">
            <summary>
            Information about a TIFF image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.Format">
            <summary>
            Format of image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.MotorolaIdentifier">
            <summary>
            Identifier indicating Motorola byte ordering (Big Endian). * is the version number (42), but never changes.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.IntelIdentifier">
            <summary>
            Identifier indicating Intel byte ordering (Little Endian). * is the version number (42), but never changes.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory">
            <summary>
            Local header of image page. 
            Essentially a mipmap header, except these "mipmaps" have no restrictions i.e. They don't have to be related to the first image at all e.g. scanned pages from a scanner.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor">
            <summary>
            Essentially the description of a property the image page possesses e.g. Width, colour space, etc
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTypes">
            <summary>
            Type of data this field contains.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTypes.BYTE">
            <summary>
            Single byte value.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTypes.ASCII_STRING">
            <summary>
            String, often with trailing null. Either way, length provided is length of string.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTypes.WORD">
            <summary>
            UInt16 value.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTypes.DWORD_UWORD">
            <summary>
            Double word. UInt32.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTypes.RATIONAL">
            <summary>
            Fraction, presented by a numerator and a denominator (both UInt32).
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags">
            <summary>
            Field name, indicating what this field represents.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.BitsPerSample">
            <summary>
            Number of bits per sample.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ColourMap">
            <summary>
            RGB colour map for palette colour iamges.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ColourResponseCurves">
            <summary>
            Fancy curves to do with colours...NTSC something? I dunno.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Compression">
            <summary>
            Method of compression. A few different methods: None, CCITT (huffman), fax CCITT, fax CCITT Group 4, LZW, packbits.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.GrayResponseCurve">
            <summary>
            Another fancy curve thing.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.GrayResponseUnit">
            <summary>
            Unit of measurement for gray response curve.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ImageLength">
            <summary>
            Height of image in pixels.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ImageWidth">
            <summary>
            Width of image in pixels.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.NewSubfileType">
            <summary>
            General indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.PhotometricInterpretation">
            <summary>
            This name sounds really cool. Seems to be some kond of pixel format.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.PlanarConfiguration">
            <summary>
            Indicates how pixels are stored. Can be contiguously (like normal images) or in planes (like passengers...?)
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Predictor">
            <summary>
            Used when compressing with LZW.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ResolutionUnit">
            <summary>
            Used with XRes and YRes. Inches, centimeters, none (arbitrary).
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.RowsPerStrip">
            <summary>
            Strips can be used for fast access even when compressed. This indicates how many pixel rows are in each strip.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.SamplesPerPixel">
            <summary>
            RGB = 3, palette and grayscale = 1. Seems to be number of channels in a way.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.StripByteCounts">
            <summary>
            Number of bytes in a strip. Saves having to figure this out blindly.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.StripOffsets">
            <summary>
            Byte offsets of each strip w.r.t. start of file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.XResolution">
            <summary>
            Number of pixels per ResolutionUnit in X Direction.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.YResolution">
            <summary>
            Number of pixels per ResolutionUnit in Y Direction.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Artist">
            <summary>
            Name of artist.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.DateTime">
            <summary>
            Date and time of image creation. YYYY:MM:DD HH:MM:SS in 24 hour time.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.HostComputer">
            <summary>
            "ENIAC or whatever" says the documentation. So who knows?
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ImageDescription">
            <summary>
            User description of image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Make">
            <summary>
            Manufacturer of camera, scanner, etc
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Model">
            <summary>
            Model name/number of camera, scanner, etc
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Software">
            <summary>
            Name and relase number of software package that created the image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Group3Options">
            <summary>
            Options for fax compressed images.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Group4Options">
            <summary>
            Options  for fax group 4 compressed images.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.DocumentName">
            <summary>
            Name of document image that was scanned.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.PageName">
            <summary>
            Name of page scanned.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.PageNumber">
            <summary>
            Number of page scanned.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.XPosition">
            <summary>
            Offset from left. Like canvas positioning.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.YPosition">
            <summary>
            Offset from Top. Like canvas positioning.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.WhitePoint">
            <summary>
            Seems to be some maths/curves thing indicating where "white" is.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.PrimaryChromaticities">
            <summary>
            Another cool name. Some more maths/curve thing indicating where each primary colour is.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.SubFileType">
            <summary>
            General indication of what kind of data this subfile is. Full res data, reduced res data, single page of multi page image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Orientation">
            <summary>
            Somehow represents the orientation of the image, so it can be rotated without actually changing pixel data.
            Clever girl...
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.Thresholding">
            <summary>
            How image is smoothed. Line art, dithered, error diffused.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ColourImageType">
            <summary>
            Indicates type of colour style. Continous tone (natural image), synthetic image (greatly restricted colour range, see ColourList)
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTags.ColourList">
            <summary>
            List of colours used in image. Only practical if significantly restricted colour spectrum.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldTag">
            <summary>
            "Name" of field.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldType">
            <summary>
            Type of data field contains e.g. byte, int32, etc
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.FieldLength">
            <summary>
            Length of field data.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.DataOffset">
            <summary>
            Offset of field data.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.Data">
            <summary>
            Data indicated by field.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptor.#ctor(System.Byte[],UsefulThings.MyBitConverter.Endianness,System.IO.Stream)">
            <summary>
            Read field descriptor from block.
            A "property" of the image.
            </summary>
            <param name="IDBlock">Block containing descriptor, but NOT it's data.</param>
            <param name="endianness">Big or little endianness defined by TIFF header.</param>
            <param name="dataStream">Full image stream to read descriptor data from.</param>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.NumberOfEntries">
            <summary>
            Number of field descriptors present for this image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.FieldDescriptors">
            <summary>
            Descriptors (properties) for this image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.NextIFDOffset">
            <summary>
            Offset of next sub image information directory.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.TIFF_Header.ImageFileDirectory.#ctor(System.IO.Stream,UsefulThings.MyBitConverter.Endianness)">
            <summary>
            Read sub image header.
            </summary>
            <param name="stream">Stream to read local header from.</param>
            <param name="endianness">Big or little, as defined by TIFF header.</param>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.FirstImageOffset">
            <summary>
            Offset of first mipmap local header.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.Pages">
            <summary>
            List of mipmap headers.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Headers.TIFF_Header.NumMipMaps">
            <summary>
            Number of sub images (mipmaps).
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Headers.TIFF_Header.#ctor(System.IO.Stream)">
            <summary>
            Creates TIFF Header from stream containing, at least, a TIFF header.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:CSharpImageLibrary.Headers.TIFF_Header.Load(System.IO.Stream)">
            <summary>
            Loads TIFF header from stream.
            </summary>
            <param name="stream">Fully formatted TIFF image.</param>
            <returns>Length of header.</returns>
        </member>
        <member name="T:CSharpImageLibrary.ImageFormats">
            <summary>
            Provides format functionality
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.DDS_DX10_HEADER_LENGTH">
            <summary>
            Length of header in bytes when Additional DX10 Header is present.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.DDS_NO_DX10_HEADER_LENGTH">
            <summary>
            Length of header when pre-DX10 format.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails">
            <summary>
            Detailed representation of an image format.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.HeaderSize">
            <summary>
            Length of header (DDS only)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.Format">
            <summary>
            Format of details.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.DX10Format">
            <summary>
            DX10Format when Format is set to DX10.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.IsPremultipliedFormat">
            <summary>
            Indicates whether format contains premultiplied alpha.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.ComponentSize">
            <summary>
            Number of bytes in colour.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.BitCount">
            <summary>
            Number of bits in colour.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.IsBlockCompressed">
            <summary>
            Indicates whether supported format is Block Compressed.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.IsMippable">
            <summary>
            Indicates whether format supports mipmaps.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.BlockSize">
            <summary>
            Size of a discrete block in bytes. (e.g. 2 channel 8 bit colour = 2, DXT1 = 16). Block can mean texel (DXTn) or pixel (uncompressed)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.Extension">
            <summary>
            String representation of formats' file extension. No '.'.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.Supported_Extension">
            <summary>
            Enum version of formats' file extension.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.IsDDS">
            <summary>
            Indicates whether format is a DDS format.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.MaxNumberOfChannels">
            <summary>
            Max number of supported channels. Usually 4, but some formats are 1 (G8), 2 (V8U8), or 3 (RGB) channels.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.SetMaxValue">
            <summary>
            Writes the max value to array using the correct bit styles.
            e.g. Will write int.Max when component size is int.Length (4 bytes).
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.ReadByte">
            <summary>
            Reads a byte from a source array using the correct bit styles.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.ReadUShort">
            <summary>
            Reads a ushort (int16) from a source array using the correct bit styles.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.ReadFloat">
            <summary>
            Reads a float from a source array using the correct bit styles.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.BlockEncoder">
            <summary>
            Holds the encoder to be used when compressing/writing image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.BlockDecoder">
            <summary>
            Holds the decoder to be used when decompressing/reading image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.WriteColour">
            <summary>
            Writes a colour from source to destination performing correct bit style conversions if requried.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails.#ctor(CSharpImageLibrary.ImageEngineFormat,CSharpImageLibrary.Headers.DDS_Header.DXGI_FORMAT)">
            <summary>
            Details the given format.
            </summary>
            <param name="dxgiFormat">Optional DX10 format. Default = Unknown.</param>
            <param name="inFormat">Image Format.</param>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SaveUnsupported">
            <summary>
            Contains formats not yet capable of saving.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.IsFormatMippable(CSharpImageLibrary.ImageEngineFormat)">
            <summary>
            Determines if given format supports mipmapping.
            </summary>
            <param name="format">Image format to check.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.IsBlockCompressed(CSharpImageLibrary.ImageEngineFormat)">
            <summary>
            Determines if format is a block compressed format.
            </summary>
            <param name="format">DDS Surface Format.</param>
            <returns>True if block compressed.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetBlockSize(CSharpImageLibrary.ImageEngineFormat,System.Int32)">
            <summary>
            Gets block size of DDS format.
            Number of channels if not compressed.
            1 if not a DDS format.
            </summary>
            <param name="format">DDS format to test.</param>
            <param name="componentSize">Size of channel components in bytes. e.g. 16bit = 2.</param>
            <returns>Number of blocks/channels in format.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetSupportedExtensions(System.Boolean)">
            <summary>
            Get list of supported extensions in lower case.
            </summary>
            <param name="addDot">Adds preceeding dot to be same as Path.GetExtension.</param>
            <returns>List of supported extensions.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.IsExtensionSupported(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Determines if file has a supported extension.
            </summary>
            <param name="filePath">Path of file to to check.</param>
            <param name="supported">Optionally list of supported extensions. Good if looping and can initialise supported and pass into this every loop.</param>
            <returns>True if supported.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetSupportedExtensionsForDialogBox">
            <summary>
            Get list of filter strings for dialog boxes of the Supported Images.
            </summary>
            <returns>List of filter strings.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetSupportedExtensionsForDialogBoxAsString">
            <summary>
            Gets list of filter strings for dialog boxes already formatted as string.
            </summary>
            <returns>String of dialog filters</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetSupportedExtensionsDescriptions">
            <summary>
            Get descriptions of supported images. Generally the description as would be seen in a SaveFileDialog.
            </summary>
            <returns>List of descriptions of supported images.</returns>
        </member>
        <member name="T:CSharpImageLibrary.ImageFormats.SupportedExtensions">
            <summary>
            File extensions supported. Used to get initial format.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.UNKNOWN">
            <summary>
            Format isn't known...
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.JPG">
            <summary>
            JPEG format. Good for small images, but is lossy, hence can have poor colours and artifacts at high compressions.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.BMP">
            <summary>
            BMP bitmap. Lossless but exceedingly poor bytes for pixel ratio i.e. huge filesize for little image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.PNG">
            <summary>
            Supports transparency, decent compression. Use this unless you can't.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.DDS">
            <summary>
            DirectDrawSurface image. DirectX image, supports mipmapping, fairly poor compression/artifacting. Good for video memory due to mipmapping.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.TGA">
            <summary>
            Targa image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.GIF">
            <summary>
            Graphics Interchange Format images. Lossy compression, supports animation (this tool doesn't though), good for low numbers of colours.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageFormats.SupportedExtensions.TIF">
            <summary>
            TIFF images. Compressed, and supports mipmaps.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.DetermineImageType(System.IO.Stream)">
            <summary>
            Determines image type via headers.
            Keeps stream position.
            </summary>
            <param name="imgData">Image data, incl header.</param>
            <returns>Type of image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.ParseExtension(System.String)">
            <summary>
            Gets file extension from string of extension.
            </summary>
            <param name="extension">String containing file extension.</param>
            <returns>SupportedExtension of extension.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.FindFormatInString(System.String)">
            <summary>
            Searches for a format within a string. Good for automatic file naming.
            </summary>
            <param name="stringWithFormatInIt">String containing format somewhere in it.</param>
            <returns>Format in string, or UNKNOWN otherwise.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetExtensionOfFormat(CSharpImageLibrary.ImageEngineFormat)">
            <summary>
            Gets file extension of supported surface formats.
            Doesn't include preceding dot.
            </summary>
            <param name="format">Format to get file extension for.</param>
            <returns>File extension without dot.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetCompressedSize(System.Int32,CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails,System.Int32,System.Int32)">
            <summary>
            Calculates the compressed size of an image with given parameters.
            </summary>
            <param name="numMipmaps">Number of mipmaps in image. JPG etc only have 1.</param>
            <param name="formatDetails">Detailed information about format.</param>
            <param name="width">Width of image (top mip if mip-able)</param>
            <param name="height">Height of image (top mip if mip-able)</param>
            <returns>Size of compressed image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.GetUncompressedSize(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets uncompressed size of image with mipmaps given dimensions and number of channels. 
            Assume 8 bits per channel.
            </summary>
            <param name="topWidth">Width of top mipmap.</param>
            <param name="topHeight">Height of top mipmap.</param>
            <param name="numChannels">Number of channels in image.</param>
            <param name="inclMips">Include size of mipmaps.</param>
            <returns>Uncompressed size in bytes including mipmaps.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageFormats.MaxNumberOfChannels(CSharpImageLibrary.ImageEngineFormat)">
            <summary>
            Gets maximum number of channels a format can contain.
            NOTE: This likely isn't actually the max number. i.e. None exceed four, but some are only one or two channels.
            </summary>
            <param name="format">Format to channel count.</param>
            <returns>Max number of channels supported.</returns>
        </member>
        <member name="T:CSharpImageLibrary.ImageEngineImage">
            <summary>
            Represents an image. Can use Windows codecs if available.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineImage.OriginalData">
            <summary>
            Original file data used to create this image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.Header">
            <summary>
            Image header.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.Width">
            <summary>
            Width of image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.Height">
            <summary>
            Height of image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.NumMipMaps">
            <summary>
            Number of mipmaps present.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.Format">
            <summary>
            Format of image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.FormatDetails">
            <summary>
            Contains details of the image format.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.MipMaps">
            <summary>
            List of mipmaps. Single level images only have one mipmap.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.FilePath">
            <summary>
            Path to file. Null if no file e.g. thumbnail from memory.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.CompressedSize">
            <summary>
            Size of Image when compressed (Essentially file size)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.UncompressedSize">
            <summary>
            Uncompressed size of main image (no mipmaps)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.NumberOfChannels">
            <summary>
            Number of channels in image. 
            NOTE: Still stored in memory as BGRA regardless.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.BitCount">
            <summary>
            Number of bits per colour.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.ComponentSize">
            <summary>
            Number of bytes per colour. i.e. 1 byte, 4 bytes (int), etc
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.IsBlockCompressed">
            <summary>
            True = Image is a block compressed DDS.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.BlockSize">
            <summary>
            Size of compressed blocks. Affected by component size. Default is 1 for normal images (jpg, etc)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.IsMippable">
            <summary>
            True = Format is able to contain mipmaps.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngineImage.FileExtension">
            <summary>
            File Extension of selected format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.#ctor(System.IO.MemoryStream,System.Int32)">
            <summary>
            Creates an image supporting many formats including DDS.
            </summary>
            <param name="stream">Stream containing image.</param>
            <param name="maxDimension">Max dimension of created image. Useful for mipmapped images, otherwise resized.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.#ctor(System.String,System.Int32)">
            <summary>
            Creates an image supporting many formats including DDS.
            </summary>
            <param name="path">Path to image.</param>
            <param name="maxDimension">Max dimension of created image. Useful for mipmapped images, otherwise resized.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates an image supporting many formats including DDS.
            </summary>
            <param name="imageData">Fully formatted image data, not just pixels.</param>
            <param name="maxDimension">Max dimension of created image. Useful for mipmapped images, otherwise resized.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.ToString">
            <summary>
            Gets string representation of ImageEngineImage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.Save(System.String,CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails,CSharpImageLibrary.MipHandling,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves image in specified format to file. If file exists, it will be overwritten.
            </summary>
            <param name="destination">File to save to.</param>
            <param name="destFormatDetails">Details of destination format.</param>
            <param name="GenerateMips">Determines how mipmaps are handled during saving.</param>
            <param name="desiredMaxDimension">Maximum size for saved image. Resizes if required, but uses mipmaps if available.</param>
            <param name="removeAlpha">True = Alpha removed. False = Uses threshold value and alpha values to mask RGB FOR DXT1 ONLY, otherwise removes completely.</param>
            <param name="mipToSave">Index of mipmap to save as single image.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.SplitChannels(System.String)">
            <summary>
            Saves each channel separately incl Alpha.
            </summary>
            <param name="savePath">General save path. Appends channel name too.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.Save(System.IO.Stream,CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails,CSharpImageLibrary.MipHandling,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves image in specified format to stream.
            Stream position not reset before or after.
            </summary>
            <param name="destination">Stream to write to at current position.</param>
            <param name="destFormatDetails">Details of destination format</param>
            <param name="GenerateMips">Determines how mipmaps are handled during saving.</param>
            <param name="desiredMaxDimension">Maximum dimension of saved image. Keeps aspect.</param>
            <param name="mipToSave">Specifies a mipmap to save within the whole.</param>
            <param name="removeAlpha">True = removes alpha. False = Uses threshold value and alpha values to mask RGB FOR DXT1 ONLY, otherwise removes completely.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.Save(CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails,CSharpImageLibrary.MipHandling,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Saves fully formatted image in specified format to byte array.
            </summary>
            <param name="destFormatDetails">Details about destination format.</param>
            <param name="GenerateMips">Determines how mipmaps are handled during saving.</param>
            <param name="desiredMaxDimension">Maximum size for saved image. Resizes if required, but uses mipmaps if available.</param>
            <param name="mipToSave">Index of mipmap to save directly.</param>
            <param name="removeAlpha">True = Alpha removed. False = Uses threshold value and alpha values to mask RGB FOR DXT1, otherwise completely removed.</param>
            <returns></returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.Dispose">
            <summary>
            Releases resources used by mipmap MemoryStreams.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.GetWPFBitmap(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a WPF Bitmap from largest mipmap.
            Does NOT require that image remains alive.
            </summary>
            <param name="ShowAlpha">True = flattens alpha, directly affecting RGB.</param>
            <param name="maxDimension">Resizes image or uses a mipmap if available. Overrides mipIndex if specified.</param>
            <param name="mipIndex">Index of mipmap to retrieve. Overridden by maxDimension if it's specified.</param>
            <returns>WPF bitmap of largest mipmap.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.Resize(System.Int32)">
            <summary>
            Resizes image.
            If single mip, scales to DesiredDimension.
            If multiple mips, finds closest mip and scales it (if required). DESTROYS ALL OTHER MIPS.
            </summary>
            <param name="DesiredDimension">Desired size of images largest dimension.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngineImage.Resize(System.Double)">
            <summary>
            Scales top mipmap and DESTROYS ALL OTHERS.
            </summary>
            <param name="scale">Scaling factor. </param>
        </member>
        <member name="T:CSharpImageLibrary.MergeChannelsImage">
            <summary>
            Represents an channel candidate to be merged into a single image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.ComponentSize">
            <summary>
            Size of channel components in bytes. e.g. 16bit = 2.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.Pixels">
            <summary>
            Pixels of this channel.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.FilePath">
            <summary>
            Path to image file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.DisplayName">
            <summary>
            Name to display in UI.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.IsRed">
            <summary>
            Indicates whether this channel is the red channel.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.IsGreen">
            <summary>
            Indicates whether this channel is the green channel.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.IsBlue">
            <summary>
            Indicates whether this channel is the blue channel.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.IsAlpha">
            <summary>
            Indicates whether this channel is the alpha channel.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.HasAssignedChannel">
            <summary>
            Indicates if any of the channel colour settings have been set.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.Thumbnail">
            <summary>
            Thumbnail of channel.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.Height">
            <summary>
            Height of channel.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MergeChannelsImage.Width">
            <summary>
            Width of channel.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.MergeChannelsImage.#ctor(System.String)">
            <summary>
            Creates a channel from an image. Can merge together with other channels to form a proper image again.
            MUST BE GRAYSCALE (PixelFormats.Gray8). 
            </summary>
            <param name="mainPath">Path to channel.</param>
        </member>
        <member name="M:CSharpImageLibrary.MergeChannelsImage.IsCompatibleWith(CSharpImageLibrary.MergeChannelsImage[])">
            <summary>
            Determines if this channel is compatible with other channels.
            </summary>
            <param name="channels">Channels to compare to.</param>
            <returns>True if compatible with all channels.</returns>
        </member>
        <member name="T:CSharpImageLibrary.MipMap">
            <summary>
            Represents a mipmap of an image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MipMap.Pixels">
            <summary>
            Pixels in bitmap image.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MipMap.UncompressedSize">
            <summary>
            Size of mipmap in memory.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MipMap.LoadedFormatDetails">
            <summary>
            Details of the format that this mipmap was created from.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MipMap.Width">
            <summary>
            Mipmap width.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.MipMap.Height">
            <summary>
            Mipmap height.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.MipMap.#ctor(System.Byte[],System.Int32,System.Int32,CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails)">
            <summary>
            Creates a Mipmap object from a WPF image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.MipMap.ToImage">
            <summary>
            Creates a WPF image from this mipmap.
            </summary>
            <returns>WriteableBitmap of image.</returns>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage">
            <summary>
            Reads and loads a Truevision TGA Format image file.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage.TGAFormat">
            <summary>
            The Targa format of the file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.TGAFormat.UNKNOWN">
            <summary>
            Unknown Targa Image format.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.TGAFormat.ORIGINAL_TGA">
            <summary>
            Original Targa Image format.
            </summary>
            <remarks>Targa Image does not have a Signature of ""TRUEVISION-XFILE"".</remarks>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.TGAFormat.NEW_TGA">
            <summary>
            New Targa Image format
            </summary>
            <remarks>Targa Image has a TargaFooter with a Signature of ""TRUEVISION-XFILE"".</remarks>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage.ColorMapTypes">
            <summary>
            Indicates the type of color map, if any, included with the image file. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ColorMapTypes.NO_COLOR_MAP">
            <summary>
            No color map was included in the file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ColorMapTypes.COLOR_MAP_INCLUDED">
            <summary>
            Color map was included in the file.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage.ImageType">
            <summary>
            The type of image read from the file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ImageType.NO_IMAGE_DATA">
            <summary>
            No image data was found in file.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ImageType.UNCOMPRESSED_COLOR_MAPPED">
            <summary>
            Image is an uncompressed, indexed color-mapped image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ImageType.UNCOMPRESSED_TRUE_COLOR">
            <summary>
            Image is an uncompressed, RGB image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ImageType.UNCOMPRESSED_BLACK_AND_WHITE">
            <summary>
            Image is an uncompressed, Greyscale image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ImageType.RUN_LENGTH_ENCODED_COLOR_MAPPED">
            <summary>
            Image is a compressed, indexed color-mapped image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ImageType.RUN_LENGTH_ENCODED_TRUE_COLOR">
            <summary>
            Image is a compressed, RGB image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.ImageType.RUN_LENGTH_ENCODED_BLACK_AND_WHITE">
            <summary>
            Image is a compressed, Greyscale image.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage.VerticalTransferOrder">
            <summary>
            The top-to-bottom ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.VerticalTransferOrder.UNKNOWN">
            <summary>
            Unknown transfer order.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.VerticalTransferOrder.BOTTOM">
            <summary>
            Transfer order of pixels is from the bottom to top.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.VerticalTransferOrder.TOP">
            <summary>
            Transfer order of pixels is from the top to bottom.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage.HorizontalTransferOrder">
            <summary>
            The left-to-right ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.HorizontalTransferOrder.UNKNOWN">
            <summary>
            Unknown transfer order.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.HorizontalTransferOrder.RIGHT">
            <summary>
            Transfer order of pixels is from the right to left.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.HorizontalTransferOrder.LEFT">
            <summary>
            Transfer order of pixels is from the left to right.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage.FirstPixelDestination">
            <summary>
            Screen destination of first pixel based on the VerticalTransferOrder and HorizontalTransferOrder.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.FirstPixelDestination.UNKNOWN">
            <summary>
            Unknown first pixel destination.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.FirstPixelDestination.TOP_LEFT">
            <summary>
            First pixel destination is the top-left corner of the image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.FirstPixelDestination.TOP_RIGHT">
            <summary>
            First pixel destination is the top-right corner of the image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.FirstPixelDestination.BOTTOM_LEFT">
            <summary>
            First pixel destination is the bottom-left corner of the image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.FirstPixelDestination.BOTTOM_RIGHT">
            <summary>
            First pixel destination is the bottom-right corner of the image.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaImage.RLEPacketType">
            <summary>
            The RLE packet type used in a RLE compressed image.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.RLEPacketType.RAW">
            <summary>
            A raw RLE packet type.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.TargaImage.RLEPacketType.RUN_LENGTH">
            <summary>
            A run-length RLE packet type.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.#ctor(CSharpImageLibrary.TargaHeader)">
            <summary>
            Creates a new instance of the TargaImage object.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.Header">
            <summary>
            Gets a TargaHeader object that holds the Targa Header information of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.ExtensionArea">
            <summary>
            Gets a TargaExtensionArea object that holds the Targa Extension Area information of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.Footer">
            <summary>
            Gets a TargaExtensionArea object that holds the Targa Footer information of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.Format">
            <summary>
            Gets the Targa format of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.Thumbnail">
            <summary>
            Gets the thumbnail of the loaded file if there is one in the file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.FileName">
            <summary>
            Gets the full path and filename of the loaded file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.Stride">
            <summary>
            Gets the byte offset between the beginning of one scan line and the next. Used when loading the image into the Image Bitmap.
            </summary>
            <remarks>
            The memory allocated for Microsoft Bitmaps must be aligned on a 32bit boundary.
            The stride refers to the number of bytes allocated for one scanline of the bitmap.
            </remarks>
        </member>
        <member name="P:CSharpImageLibrary.TargaImage.Padding">
            <summary>
            Gets the number of bytes used to pad each scan line to meet the Stride value. Used when loading the image into the Image Bitmap.
            </summary>
            <remarks>
            The memory allocated for Microsoft Bitmaps must be aligned on a 32bit boundary.
            The stride refers to the number of bytes allocated for one scanline of the bitmap.
            In your loop, you copy the pixels one scanline at a time and take into 
            consideration the amount of padding that occurs due to memory alignment.
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.Finalize">
            <summary>
            TargaImage deconstructor.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.#ctor(System.String)">
            <summary>
            Creates a new instance of the TargaImage object with strFileName as the image loaded.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.#ctor(System.IO.Stream,CSharpImageLibrary.TargaHeader)">
            <summary>
            Creates TGA image from stream.
            </summary>
            <param name="stream">Stream containing image.</param>
            <param name="prevHeader">TargaHeader if previously loaded.</param>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.LoadTGAFooterInfo(System.IO.BinaryReader)">
            <summary>
            Loads the Targa Footer information from the file.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.LoadTGAHeaderInfo(System.IO.BinaryReader,CSharpImageLibrary.TargaHeader)">
            <summary>
            Loads the Targa Header information from the file.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.LoadTGAExtensionArea(System.IO.BinaryReader)">
            <summary>
            Loads the Targa Extension Area from the file, if it exists.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.LoadImageBytes(System.IO.BinaryReader)">
            <summary>
            Reads the image data bytes from the file. Handles Uncompressed and RLE Compressed image data. 
            Uses FirstPixelDestination to properly align the image.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
            <returns>An array of bytes representing the image data in the proper alignment.</returns>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.LoadTGAImage(System.IO.BinaryReader)">
            <summary>
            Reads the image data bytes from the file and loads them into the Image Bitmap object.
            Also loads the color map, if any, into the Image Bitmap.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.GetPixelFormat">
            <summary>
            Gets the PixelFormat to be used by the Image based on the Targa file's attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.LoadThumbnail(System.IO.BinaryReader,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Loads the thumbnail of the loaded image file, if any.
            </summary>
            <param name="binReader">A BinaryReader that points the loaded file byte stream.</param>
            <param name="pfPixelFormat">A PixelFormat value indicating what pixel format to use when loading the thumbnail.</param>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.ClearAll">
            <summary>
            Clears out all objects and resources.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.Dispose">
            <summary>
            Disposes all resources used by this instance of the TargaImage class.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaImage.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">If true dispose all resources, else dispose only release unmanaged resources.</param>
        </member>
        <member name="T:CSharpImageLibrary.TargaHeader">
            <summary>
            This class holds all of the header properties of a Targa image. 
            This includes the TGA File Header section the ImageID and the Color Map.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ImageIDLength">
            <summary>
            Gets the number of bytes contained the ImageIDValue property. The maximum
            number of characters is 255. A value of zero indicates that no ImageIDValue is included with the
            image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetImageIDLength(System.Byte)">
            <summary>
            Sets the ImageIDLength property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bImageIDLength">The Image ID Length value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ColorMapType">
            <summary>
            Gets the type of color map (if any) included with the image. There are currently 2
            defined values for this field:
            NO_COLOR_MAP - indicates that no color-map data is included with this image.
            COLOR_MAP_INCLUDED - indicates that a color-map is included with this image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetColorMapType(CSharpImageLibrary.TargaImage.ColorMapTypes)">
            <summary>
            Sets the ColorMapType property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eColorMapType">One of the ColorMapType enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ImageType">
            <summary>
            Gets one of the ImageType enumeration values indicating the type of Targa image read from the file.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetImageType(CSharpImageLibrary.TargaImage.ImageType)">
            <summary>
            Sets the ImageType property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eImageType">One of the ImageType enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ColorMapFirstEntryIndex">
            <summary>
            Gets the index of the first color map entry. ColorMapFirstEntryIndex refers to the starting entry in loading the color map.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetColorMapFirstEntryIndex(System.Int16)">
            <summary>
            Sets the ColorMapFirstEntryIndex property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sColorMapFirstEntryIndex">The First Entry Index value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ColorMapLength">
            <summary>
            Gets total number of color map entries included.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetColorMapLength(System.Int16)">
            <summary>
            Sets the ColorMapLength property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sColorMapLength">The Color Map Length value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ColorMapEntrySize">
            <summary>
            Gets the number of bits per entry in the Color Map. Typically 15, 16, 24 or 32-bit values are used.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetColorMapEntrySize(System.Byte)">
            <summary>
            Sets the ColorMapEntrySize property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bColorMapEntrySize">The Color Map Entry Size value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.XOrigin">
            <summary>
            Gets the absolute horizontal coordinate for the lower
            left corner of the image as it is positioned on a display device having
            an origin at the lower left of the screen (e.g., the TARGA series).
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetXOrigin(System.Int16)">
            <summary>
            Sets the XOrigin property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sXOrigin">The X Origin value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.YOrigin">
            <summary>
            These bytes specify the absolute vertical coordinate for the lower left
            corner of the image as it is positioned on a display device having an
            origin at the lower left of the screen (e.g., the TARGA series).
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetYOrigin(System.Int16)">
            <summary>
            Sets the YOrigin property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sYOrigin">The Y Origin value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.Width">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetWidth(System.Int16)">
            <summary>
            Sets the Width property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sWidth">The Width value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.Height">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetHeight(System.Int16)">
            <summary>
            Sets the Height property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="sHeight">The Height value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.PixelDepth">
            <summary>
            Gets the number of bits per pixel. This number includes
            the Attribute or Alpha channel bits. Common values are 8, 16, 24 and 32.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetPixelDepth(System.Byte)">
            <summary>
            Sets the PixelDepth property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bPixelDepth">The Pixel Depth value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ImageDescriptor">
            <summary>
            Gets or Sets the ImageDescriptor property. The ImageDescriptor is the byte that holds the 
            Image Origin and Attribute Bits values.
            Available only to objects in the same assembly as TargaHeader.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.FirstPixelDestination">
            <summary>
            Gets one of the FirstPixelDestination enumeration values specifying the screen destination of first pixel based on VerticalTransferOrder and HorizontalTransferOrder
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.VerticalTransferOrder">
            <summary>
            Gets one of the VerticalTransferOrder enumeration values specifying the top-to-bottom ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetVerticalTransferOrder(CSharpImageLibrary.TargaImage.VerticalTransferOrder)">
            <summary>
            Sets the VerticalTransferOrder property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eVerticalTransferOrder">One of the VerticalTransferOrder enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.HorizontalTransferOrder">
            <summary>
            Gets one of the HorizontalTransferOrder enumeration values specifying the left-to-right ordering in which pixel data is transferred from the file to the screen.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetHorizontalTransferOrder(CSharpImageLibrary.TargaImage.HorizontalTransferOrder)">
            <summary>
            Sets the HorizontalTransferOrder property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="eHorizontalTransferOrder">One of the HorizontalTransferOrder enumeration values.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.AttributeBits">
            <summary>
            Gets the number of attribute bits per pixel.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetAttributeBits(System.Byte)">
            <summary>
            Sets the AttributeBits property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="bAttributeBits">The Attribute Bits value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ImageIDValue">
            <summary>
            Gets identifying information about the image. 
            A value of zero in ImageIDLength indicates that no ImageIDValue is included with the image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaHeader.SetImageIDValue(System.String)">
            <summary>
            Sets the ImageIDValue property, available only to objects in the same assembly as TargaHeader.
            </summary>
            <param name="strImageIDValue">The Image ID value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ColorMap">
            <summary>
            Gets the Color Map of the image, if any. The Color Map is represented by a list of System.Drawing.Color objects.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.ImageDataOffset">
            <summary>
            Gets the offset from the beginning of the file to the Image Data.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaHeader.BytesPerPixel">
            <summary>
            Gets the number of bytes per pixel.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaFooter">
            <summary>
            Holds Footer infomation read from the image file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaFooter.ExtensionAreaOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Extension Area. 
            If the ExtensionAreaOffset is zero, no Extension Area exists in the file.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaFooter.SetExtensionAreaOffset(System.Int32)">
            <summary>
            Sets the ExtensionAreaOffset property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="intExtensionAreaOffset">The Extension Area Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaFooter.DeveloperDirectoryOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Developer Area.
            If the DeveloperDirectoryOffset is zero, then the Developer Area does not exist
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaFooter.SetDeveloperDirectoryOffset(System.Int32)">
            <summary>
            Sets the DeveloperDirectoryOffset property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="intDeveloperDirectoryOffset">The Developer Directory Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaFooter.Signature">
            <summary>
            This string is formatted exactly as "TRUEVISION-XFILE" (no quotes). If the
            signature is detected, the file is assumed to be a New TGA format and MAY,
            therefore, contain the Developer Area and/or the Extension Areas. If the
            signature is not found, then the file is assumed to be an Original TGA format.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaFooter.SetSignature(System.String)">
            <summary>
            Sets the Signature property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="strSignature">The Signature value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaFooter.ReservedCharacter">
            <summary>
            A New Targa format reserved character "." (period)
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaFooter.SetReservedCharacter(System.String)">
            <summary>
            Sets the ReservedCharacter property, available only to objects in the same assembly as TargaFooter.
            </summary>
            <param name="strReservedCharacter">The ReservedCharacter value read from the file.</param>
        </member>
        <member name="M:CSharpImageLibrary.TargaFooter.#ctor">
            <summary>
            Creates a new instance of the TargaFooter class.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.TargaExtensionArea">
            <summary>
            This class holds all of the Extension Area properties of the Targa image. If an Extension Area exists in the file.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.ExtensionSize">
            <summary>
            Gets the number of Bytes in the fixed-length portion of the ExtensionArea. 
            For Version 2.0 of the TGA File Format, this number should be set to 495
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetExtensionSize(System.Int32)">
            <summary>
            Sets the ExtensionSize property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intExtensionSize">The Extension Size value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.AuthorName">
            <summary>
            Gets the name of the person who created the image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetAuthorName(System.String)">
            <summary>
            Sets the AuthorName property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strAuthorName">The Author Name value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.AuthorComments">
            <summary>
            Gets the comments from the author who created the image.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetAuthorComments(System.String)">
            <summary>
            Sets the AuthorComments property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strAuthorComments">The Author Comments value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.DateTimeStamp">
            <summary>
            Gets the date and time that the image was saved.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetDateTimeStamp(System.DateTime)">
            <summary>
            Sets the DateTimeStamp property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="dtDateTimeStamp">The Date Time Stamp value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.JobName">
            <summary>
            Gets the name or id tag which refers to the job with which the image was associated.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetJobName(System.String)">
            <summary>
            Sets the JobName property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strJobName">The Job Name value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.JobTime">
            <summary>
            Gets the job elapsed time when the image was saved.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetJobTime(System.TimeSpan)">
            <summary>
            Sets the JobTime property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="dtJobTime">The Job Time value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.SoftwareID">
            <summary>
            Gets the Software ID. Usually used to determine and record with what program a particular image was created.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetSoftwareID(System.String)">
            <summary>
            Sets the SoftwareID property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strSoftwareID">The Software ID value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.SoftwareVersion">
            <summary>
            Gets the version of software defined by the SoftwareID.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetSoftwareVersion(System.String)">
            <summary>
            Sets the SoftwareVersion property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="strSoftwareVersion">The Software Version value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.KeyColor">
            <summary>
            Gets the key color in effect at the time the image is saved.
            The Key Color can be thought of as the "background color" or "transparent color".
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetKeyColor(System.Drawing.Color)">
            <summary>
            Sets the KeyColor property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="cKeyColor">The Key Color value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.PixelAspectRatioNumerator">
            <summary>
            Gets the Pixel Ratio Numerator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetPixelAspectRatioNumerator(System.Int32)">
            <summary>
            Sets the PixelAspectRatioNumerator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPixelAspectRatioNumerator">The Pixel Aspect Ratio Numerator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.PixelAspectRatioDenominator">
            <summary>
            Gets the Pixel Ratio Denominator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetPixelAspectRatioDenominator(System.Int32)">
            <summary>
            Sets the PixelAspectRatioDenominator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPixelAspectRatioDenominator">The Pixel Aspect Ratio Denominator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.PixelAspectRatio">
            <summary>
            Gets the Pixel Aspect Ratio.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.GammaNumerator">
            <summary>
            Gets the Gamma Numerator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetGammaNumerator(System.Int32)">
            <summary>
            Sets the GammaNumerator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intGammaNumerator">The Gamma Numerator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.GammaDenominator">
            <summary>
            Gets the Gamma Denominator.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetGammaDenominator(System.Int32)">
            <summary>
            Sets the GammaDenominator property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intGammaDenominator">The Gamma Denominator value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.GammaRatio">
            <summary>
            Gets the Gamma Ratio.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.ColorCorrectionOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Color Correction table.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetColorCorrectionOffset(System.Int32)">
            <summary>
            Sets the ColorCorrectionOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intColorCorrectionOffset">The Color Correction Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.PostageStampOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Postage Stamp image data.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetPostageStampOffset(System.Int32)">
            <summary>
            Sets the PostageStampOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intPostageStampOffset">The Postage Stamp Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.ScanLineOffset">
            <summary>
            Gets the offset from the beginning of the file to the start of the Scan Line table.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetScanLineOffset(System.Int32)">
            <summary>
            Sets the ScanLineOffset property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intScanLineOffset">The Scan Line Offset value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.AttributesType">
            <summary>
            Gets the type of Alpha channel data contained in the file.
            0: No Alpha data included.
            1: Undefined data in the Alpha field, can be ignored
            2: Undefined data in the Alpha field, but should be retained
            3: Useful Alpha channel data is present
            4: Pre-multiplied Alpha (see description below)
            5-127: RESERVED
            128-255: Un-assigned
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.TargaExtensionArea.SetAttributesType(System.Int32)">
            <summary>
            Sets the AttributesType property, available only to objects in the same assembly as TargaExtensionArea.
            </summary>
            <param name="intAttributesType">The Attributes Type value read from the file.</param>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.ScanLineTable">
            <summary>
            Gets a list of offsets from the beginning of the file that point to the start of the next scan line, 
            in the order that the image was saved 
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.TargaExtensionArea.ColorCorrectionTable">
            <summary>
            Gets a list of Colors where each Color value is the desired Color correction for that entry.
            This allows the user to store a correction table for image remapping or LUT driving.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Utilities">
            <summary>
            Utilities functions used by the TargaImage class.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.Utilities.GetBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Gets an int value representing the subset of bits from a single Byte.
            </summary>
            <param name="b">The Byte used to get the subset of bits from.</param>
            <param name="offset">The offset of bits starting from the right.</param>
            <param name="count">The number of bits to read.</param>
            <returns>
            An int value representing the subset of bits.
            </returns>
            <remarks>
            Given -> b = 00110101 
            A call to GetBits(b, 2, 4)
            GetBits looks at the following bits in the byte -> 00{1101}00
            Returns 1101 as an int (13)
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.Utilities.GetColorFrom2Bytes(System.Byte,System.Byte)">
            <summary>
            Reads ARGB values from the 16 bits of two given Bytes in a 1555 format.
            </summary>
            <param name="one">The first Byte.</param>
            <param name="two">The Second Byte.</param>
            <returns>A System.Drawing.Color with a ARGB values read from the two given Bytes</returns>
            <remarks>
            Gets the ARGB values from the 16 bits in the two bytes based on the below diagram
            |   BYTE 1   |  BYTE 2   |
            | A RRRRR GG | GGG BBBBB |
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.Utilities.GetIntBinaryString(System.Int32)">
            <summary>
            Gets a 32 character binary string of the specified Int32 value.
            </summary>
            <param name="n">The value to get a binary string for.</param>
            <returns>A string with the resulting binary for the supplied value.</returns>
            <remarks>
            This method was used during debugging and is left here just for fun.
            </remarks>
        </member>
        <member name="M:CSharpImageLibrary.Utilities.GetInt16BinaryString(System.Int16)">
            <summary>
            Gets a 16 character binary string of the specified Int16 value.
            </summary>
            <param name="n">The value to get a binary string for.</param>
            <returns>A string with the resulting binary for the supplied value.</returns>
            <remarks>
            This method was used during debugging and is left here just for fun.
            </remarks>
        </member>
        <member name="T:CSharpImageLibrary.WIC_Codecs">
            <summary>
            Provides native Windows codec functionality for Windows 8.1+.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.WIC_Codecs.JPGCompressionSetting">
            <summary>
            JPG Quality setting. Higher values = higher quality and image size.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.WIC_Codecs.WindowsCodecsPresent">
            <summary>
            Tests whether Windows WIC Codecs are present.
            </summary>
            <returns>True if WIC Codecs available</returns>
        </member>
        <member name="M:CSharpImageLibrary.WIC_Codecs.LoadWithCodecs(System.String,System.Int32,System.Int32,System.Double,System.Boolean,CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails)">
            <summary>
            Loads useful information from an image file.
            </summary>
            <param name="imageFile">Path to image file.</param>
            <param name="decodeWidth">Width to decode to. Aspect unchanged if decodeHeight = 0.</param>
            <param name="decodeHeight">Height to decode to. Aspect unchanged if decodeWidth = 0.</param>
            <param name="scale">DOMINANT. decodeWidth and decodeHeight ignored if this is > 0. Amount to scale by. Range 0-1.</param>
            <param name="formatDetails">Details about the format being loaded.</param>
            <param name="isDDS">True = Image is a DDS.</param>
            <returns>BGRA Pixel Data as stream.</returns>
        </member>
        <member name="M:CSharpImageLibrary.WIC_Codecs.LoadWithCodecs(System.IO.Stream,System.Int32,System.Int32,System.Double,System.Boolean,CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails)">
            <summary>
            Loads useful information from image stream using Windows 8.1+ codecs.
            </summary>
            <param name="stream">Stream containing entire file. NOT just pixels.</param>
            <param name="decodeWidth">Width to decode as. Aspect ratio unchanged if decodeHeight = 0.</param>
            <param name="decodeHeight">Height to decode as. Aspect ratio unchanged if decodeWidth = 0.</param>
            <param name="isDDS">True = image is a DDS.</param>
            <param name="scale">DOMINANT. DecodeWidth and DecodeHeight ignored if this is > 0. Amount to scale by. Range 0-1.</param>
            <param name="formatDetails">Details about the format being loaded.</param>
            <returns>BGRA Pixel Data as stream.</returns>
        </member>
        <member name="M:CSharpImageLibrary.WIC_Codecs.AttemptUsingWindowsCodecs(System.String,System.Int32,System.Int32)">
            <summary>
            Attempts to read image using WIC Codecs.
            Returns null if unable to.
            </summary>
            <param name="imagePath">Path to image file.</param>
            <param name="decodeHeight">Height to decode to. 0 = no scaling.</param>
            <param name="decodeWidth">Width to decode to. 0 = no scaling.</param>
            <returns>Loaded Image</returns>
        </member>
        <member name="M:CSharpImageLibrary.WIC_Codecs.AttemptUsingWindowsCodecs(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Attempts to read image using WIC Codecs.
            Returns null if unable to.
            </summary>
            <param name="ImageFileData">Entire image file. NOT raw pixel data.</param>
            <param name="decodeWidth">Width to decode to. 0 = no scaling.</param>
            <param name="decodeHeight">Height to decode to. 0 = no scaling.</param>
            <returns>Loaded image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.WIC_Codecs.AttemptUsingWindowsCodecs(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Attempts to read image using WIC Codecs.
            Returns null if unable to.
            </summary>
            <param name="stream">Stream containing entire file. NOT raw pixels.</param>
            <param name="decodeWidth">Width to decode to. Aspect unchanged if decodeHeight = 0.</param>
            <param name="decodeHeight">Height to decode to. Aspect unchanged if decodeWidth = 0.</param>
            <returns>BitmapImage of stream.</returns>
        </member>
        <member name="T:CSharpImageLibrary.AlphaSettings">
            <summary>
            Determines how alpha is handled.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.AlphaSettings.KeepAlpha">
            <summary>
            Keeps any existing alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.AlphaSettings.Premultiply">
            <summary>
            Premultiplies RBG and Alpha channels. Alpha remains.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.AlphaSettings.RemoveAlphaChannel">
            <summary>
            Removes alpha channel.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.MipHandling">
            <summary>
            Determines how Mipmaps are handled.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.MipHandling.Default">
            <summary>
            If mips are present, they are used, otherwise regenerated.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.MipHandling.KeepExisting">
            <summary>
            Keeps existing mips if existing. Doesn't generate new ones either way.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.MipHandling.GenerateNew">
            <summary>
            Removes old mips and generates new ones.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.MipHandling.KeepTopOnly">
            <summary>
            Removes all but the top mip. Used for single mip formats.
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.ImageEngine">
            <summary>
            Provides main image functions
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.Cancel">
            <summary>
            Initiates a cancellation of currently running tasks.
            Not guaranteed to cancel immediately.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.ResetCancellation(System.Threading.CancellationTokenSource)">
            <summary>
            Resets cancellation token source given an external source.
            </summary>
            <param name="yourCTS">External CTS to use.</param>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.ResetCancellation">
            <summary>
            Resets cancellation token source.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngine.IsCancellationRequested">
            <summary>
            Indicates whether cancellation has been requested for 
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngine.WindowsWICCodecsAvailable">
            <summary>
            True = Windows WIC Codecs are present (8+)
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngine.EnableThreading">
            <summary>
            Enables threading of Loading and Saving operations to improve performance.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngine.EnableGPUAcceleration">
            <summary>
            CURRENTLY DISABLED. Didn't work :(
            Enables GPU Accelerated encoding and decoding of all formats.
            NOTE: WIC formats (jpg, bmp, png etc) probably already use GPU, but are not covered by this flag.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.ImageEngine.NumThreads">
            <summary>
            Determines how many threads to use. -1 is infinite.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.#cctor">
            <summary>
            Constructor. Checks WIC status before any other operation.
            </summary>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.Save(System.Collections.Generic.List{CSharpImageLibrary.MipMap},CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails,CSharpImageLibrary.MipHandling,CSharpImageLibrary.AlphaSettings,System.Int32,System.Int32)">
            <summary>
            Save mipmaps as given format to stream.
            </summary>
            <param name="MipMaps">List of Mips to save.</param>
            <param name="mipChoice">Determines how to handle mipmaps.</param>
            <param name="maxDimension">Maximum value for either image dimension.</param>
            <param name="alphaSetting">Determines how to handle alpha.</param>
            <param name="mipToSave">0 based index on which mipmap to make top of saved image.</param>
            <param name="destFormatDetails">Details about the destination format.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.DestroyMipMaps(System.Collections.Generic.List{CSharpImageLibrary.MipMap},System.Int32)">
            <summary>
            Destroys mipmaps. Expects at least one mipmap in given list.
            </summary>
            <param name="MipMaps">List of Mipmaps.</param>
            <param name="mipToSave">Index of mipmap to save.</param>
            <returns>Number of mips present.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.BulkConvert(System.Collections.Generic.IEnumerable{System.String},CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails,System.Boolean,System.String,CSharpImageLibrary.MipHandling,System.Boolean,System.Boolean,System.IProgress{System.Int32})">
            <summary>
            Performs a bulk conversion of a bunch of images given conversion parameters.
            </summary>
            <param name="files">List of supported files to be converted.</param>
            <param name="saveFolder">Destination folder of all textures. Can be null if <paramref name="useSourceAsDestination"/> is set.</param>
            <param name="saveMipType">Determines how to handle mipmaps for converted images.</param>
            <param name="useSourceAsDestination">True = Converted images are saved next to the originals.</param>
            <param name="removeAlpha">True = Alpha is removed from converted images.</param>
            <param name="destFormatDetails">Details about destination format.</param>
            <param name="progressReporter">Progress reporting callback.</param>
            <param name="useSourceFormat">No format conversion is performed if possible.</param>
            <returns>Errors</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.MergeChannels(CSharpImageLibrary.MergeChannelsImage,CSharpImageLibrary.MergeChannelsImage,CSharpImageLibrary.MergeChannelsImage,CSharpImageLibrary.MergeChannelsImage)">
            <summary>
            Merges up to 4 channels into a single image.
            </summary>
            <param name="blue">Blue channel. Can be null.</param>
            <param name="green">Green channel. Can be null.</param>
            <param name="red">Red channel. Can be null.</param>
            <param name="alpha">Alpha channel. Can be null.</param>
            <returns>Merged image.</returns>
        </member>
        <member name="M:CSharpImageLibrary.ImageEngine.GetPixelsAsBGRA32(System.Int32,System.Int32,System.Byte[],CSharpImageLibrary.ImageFormats.ImageEngineFormatDetails)">
            <summary>
            Gets pixels as a BGRA32 array regardless of their original format (float, short)
            </summary>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
            <param name="pixels">Original pixels.</param>
            <param name="formatDetails">Details about format pixels array is currently in.</param>
            <returns>BGRA32 pixel array.</returns>
        </member>
        <member name="T:CSharpImageLibrary.ImageEngineFormat">
            <summary>
            Indicates image format.
            Use FORMAT struct.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.Unknown">
            <summary>
            Unknown image format. Using this as a save/load format will fail that operation.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.JPG">
            <summary>
            Standard JPEG image handled by everything.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.PNG">
            <summary>
            Standard PNG image handled by everything. Uses alpha channel if available.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.BMP">
            <summary>
            Standard BMP image handled by everything.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.TGA">
            <summary>
            Targa image. Multipage format. Can be used for mipmaps.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.GIF">
            <summary>
            Standard GIF Image handled by everything. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_DXT1">
            <summary>
            (BC1) Block Compressed Texture. Compresses 4x4 texels.
            Used for Simple Non Alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_DXT2">
            <summary>
            (BC2) Block Compressed Texture. Compresses 4x4 texels.
            Used for Sharp Alpha. Premultiplied alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_DXT3">
            <summary>
            (BC2) Block Compressed Texture. Compresses 4x4 texels.
            Used for Sharp Alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_DXT4">
            <summary>
            (BC3) Block Compressed Texture. Compresses 4x4 texels.
            Used for Gradient Alpha. Premultiplied alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_DXT5">
            <summary>
            (BC3) Block Compressed Texture. Compresses 4x4 texels.
            Used for Gradient Alpha. 
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_DX10">
            <summary>
            Fancy new DirectX 10+ format indicator. DX10 Header will contain true format.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_ABGR_8">
            <summary>
            Uncompressed ARGB DDS.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_ATI1">
            <summary>
            (BC4) Block Compressed Texture. Compresses 4x4 texels.
            Used for Normal (bump) Maps. 8 bit single channel with alpha.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_V8U8">
            <summary>
            Uncompressed pair of 8 bit channels.
            Used for Normal (bump) maps.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_G8_L8">
            <summary>
            Single 8 bit channel.
            Used for Luminescence.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_A8L8">
            <summary>
            Alpha and single channel luminescence.
            Uncompressed.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_RGB_8">
            <summary>
            RGB. No alpha. 
            Uncompressed.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_ATI2_3Dc">
            <summary>
            (BC5) Block Compressed Texture. Compresses 4x4 texels.
            Used for Normal (bump) Maps. Pair of 8 bit channels.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.TIF">
            <summary>
            Format designed for scanners. Compressed.
            Allows mipmaps.
            </summary>
        </member>
        <member name="F:CSharpImageLibrary.ImageEngineFormat.DDS_CUSTOM">
            <summary>
            Used when the exact format is not present in this enum, but enough information is present to load it. (ARGB16 or something)
            </summary>
        </member>
        <member name="T:CSharpImageLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CSharpImageLibrary.Properties.Resources.DXT1_CodecTest">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
    </members>
</doc>
